// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AMContext))]
    partial class AMContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationCore.Domain.Admission", b =>
                {
                    b.Property<DateTime>("DateAdmission")
                        .HasColumnType("datetime2");

                    b.Property<int>("ChambreFK")
                        .HasColumnType("int");

                    b.Property<string>("PatientFK")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MotifAdmission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NbJours")
                        .HasColumnType("int");

                    b.HasKey("DateAdmission", "ChambreFK", "PatientFK");

                    b.HasIndex("ChambreFK");

                    b.HasIndex("PatientFK");

                    b.ToTable("Admissions");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Chambre", b =>
                {
                    b.Property<int>("NumeroChambre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NumeroChambre"));

                    b.Property<int>("CliniqueFK")
                        .HasColumnType("int");

                    b.Property<float>("Prix")
                        .HasColumnType("real");

                    b.Property<int>("TypeChambre")
                        .HasColumnType("int");

                    b.HasKey("NumeroChambre");

                    b.HasIndex("CliniqueFK");

                    b.ToTable("Chambres");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Clinique", b =>
                {
                    b.Property<int>("CliniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CliniqueId"));

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Capacite")
                        .HasColumnType("int");

                    b.Property<int>("NumTel")
                        .HasColumnType("int");

                    b.HasKey("CliniqueId");

                    b.ToTable("Cliniques");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Patient", b =>
                {
                    b.Property<string>("CIN")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdresseEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateNaissance")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumDossier")
                        .HasColumnType("int");

                    b.Property<int>("NumTel")
                        .HasColumnType("int");

                    b.HasKey("CIN");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Admission", b =>
                {
                    b.HasOne("ApplicationCore.Domain.Chambre", "Chambre")
                        .WithMany("Admissions")
                        .HasForeignKey("ChambreFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Domain.Patient", "Patient")
                        .WithMany("Admissions")
                        .HasForeignKey("PatientFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chambre");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Chambre", b =>
                {
                    b.HasOne("ApplicationCore.Domain.Clinique", "Clinique")
                        .WithMany("Chambres")
                        .HasForeignKey("CliniqueFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinique");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Patient", b =>
                {
                    b.OwnsOne("ApplicationCore.Domain.NomComplet", "NomComplet", b1 =>
                        {
                            b1.Property<string>("PatientCIN")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Nom")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Prenom")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PatientCIN");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientCIN");
                        });

                    b.Navigation("NomComplet")
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Domain.Chambre", b =>
                {
                    b.Navigation("Admissions");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Clinique", b =>
                {
                    b.Navigation("Chambres");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Patient", b =>
                {
                    b.Navigation("Admissions");
                });
#pragma warning restore 612, 618
        }
    }
}
